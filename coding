##count to tpm
library(biomaRt)
raw <- read.csv("GSE130970.csv",row.names = 1)
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
test <- getBM(attributes=c('ensembl_gene_id', 'start_position',
                           'end_position','ensembl_transcript_id',
                           'transcript_length','gene_biotype'),
              mart = ensembl)
test <- test[order(test$ensembl_gene_id,test$transcript_length,
                   decreasing = T),]
g_l <- test[!duplicated(test$ensembl_gene_id),]
g_l <- g_l[,c(1,5)]
ng=intersect(rownames(raw),g_l$ensembl_gene_id)
length(ng)
lengths=g_l[match(ng,g_l$ensembl_gene_id),2]
names(lengths) <- g_l[match(ng,g_l$ensembl_gene_id),1]
raw <- raw[names(lengths),]
transcript=as.data.frame(lengths)
colnames(transcript)[1]="length"
#read count ---TPM
expr1 = raw/transcript$length
tpm = t(t(expr1)/colSums(expr1)) * 10^6
tpm=log2(tpm+1)

##GSVA and ssgsea
library(genefilter)
library(GSVA)
library(Biobase)
library(stringr)
gene_set<-read.csv("mmc3.txt")[,c(1:2)]
cupro=c("FDX1","LIAS","LIPT1","DLD","DLAT","PDHA1","PDHB","MTF1","GLS","CDKN2A")
head(gene_set)
list<- split(as.matrix(mmc3)[,1], mmc3[,2])
list2<-list(cupro)
gsea_matrix1<- gsva(as.matrix(tpm), list,method='ssgsea',kcdf='Gaussian')
gsva_matrix2<- gsva(as.matrix(tpm), list2)

##PCA
cu <- GSE130970[cupro,]
pca = prcomp(cu[,-ncol(cu)],center = TRUE,scale. = TRUE)
df1 <- pca$x
df1 <- as.data.frame(df1)
summ <- summary(pca)
summ
xlab1 <- paste0("PC1(",round(summ$importance[2,1]*100,2),"%)")
ylab1 <- paste0("PC2(",round(summ$importance[2,2]*100,2),"%)")
ggplot(data = df1,aes(x = PC1,y = PC2,color = clinic$status))+
  stat_ellipse(aes(fill = clinic$status),
               type = "norm",geom = "polygon",alpha = 0.25,color = NA)+ # ??????????Ô²
  geom_point(size = 3.5)+
  labs(x = xlab1,y = ylab1,color = "Condition",title = "PCA Scores Plot")+
  guides(fill = "none")+
  theme_bw()+
  scale_fill_manual(values = c("purple","orange","pink"))+
  scale_colour_manual(values = c("purple","orange","pink"))+
  theme(plot.title = element_text(hjust = 0.5,size = 15),
        axis.text = element_text(size = 11),axis.title = element_text(size = 13),
        legend.text = element_text(size = 11),legend.title = element_text(size = 13),
        plot.margin = unit(c(0.4,0.4,0.4,0.4),'cm'))

##boxplot
library(ggplot2)
library(ggpubr)
ggplot(nafl,aes(x=variable,y=value,fill=group))+
  geom_boxplot()+
  ylab('log2 Normalized value')+xlab('')+
  mytheme+
  stat_compare_means(aes(label = ..p.signif..),method = 'wilcox.test',size=6)

##Venn
library(ggvenn)
set1<-read.csv("gene_a.csv")
set2<-read.csv("gene_b.csv")
set3<-read.csv("gene_c.csv")
dat <- list( A = set1$gene_id,  B = set2$gene_id, C = set3$gene_id)
ggvenn(dat)

##correlation
library(ggcorrplot)
cc=cor(cu)
ccp=cor_pmat(cu)
ggcorrplot(cc,hc.order = F,  
           ggtheme = ggplot2::theme_void(base_size = 15), 
           colors = c("#00468BFF", 'white',"#ED0000FF"), 
           lab = T,lab_size = 5,    
           tl.cex = 15,             
           p.mat = ccp,         
           sig.level = 0.05,       
           pch = 4,                 
           pch.cex = 10,insig = "blank") 



##risk model
clinic <- read.csv('GSE130970TYPE.csv')
risk <- data.frame(t(tpm[c('DLD','PDHB'),]))
risk <- cbind(risk,clinic$status)
model <- lm(status~DLD+PDHB,data = risk)
summary(model)
response <- predict(model,risk)

##ROC
library(pROC)
library(ggplot2)
rocobj1<-roc(risk$status,risk$DLD)
rocobj2<-roc(risk$status,risk$PDHB)
rocobj3 <- roc(risk$stauts,response)
auc(rocobj1)
auc(rocobj2)
g3<-ggroc(list(DLD=rocobj1,PDHB=rocobj2,model=rocobj3),size = 1.3,legacy.axes = TRUE)

##lollipop chart
ggplot(PDHB,aes(x=type,y=cor))+geom_hline(yintercept = 0, color = "grey", size = 1) + 
  geom_point(aes(color = pvalue),size=3) + scale_color_gradient(high = '#00468BFF', low = '#ED0000FF',breaks=c(0,0.05,0.1,0.2,0.3),limits=c(0,0.3)) +     
  geom_segment(aes(x=type,xend=type,y=0,yend=ifelse(cor>0,cor-0.01,cor+0.01)),color="black")+ coord_flip()+mytheme+labs(x=NULL,y='PDHB Correlation')+ylim(-0.4,0.6)

##estimate
library(estimate)
NAFLDExpr <- system.file("extdata", "sample_input.txt",
                         package="estimate")

NAFLD=read.table(NAFLDExpr)
NAFLD[1:4,1:4]
NAFLD(ov[,1:4])
filterCommonGenes(input.f=NAFLDExpr, 
                  output.f="NAFLD_10412genes.gct", 
                  id="GeneSymbol")

estimateScore(input.ds = "NAFLD_10412genes.gct",
              output.ds="NAFLD_estimate_score.gct", 
              platform="affymetrix")
scores=read.table("NAFLD_estimate_score.gct",skip = 2,header = T)
rownames(scores)=scores[,1]
scores=t(scores[,3:ncol(scores)])

##scartter plot
ggplot(dat,aes(x=DLD,y=StromalScore))+geom_point()+geom_smooth(method = 'lm')+mytheme+stat_cor(method = "pearson",label.x = 3, label.y = 500)


##limma
library(limma)
library(edgeR)
dge<-avereps(raw[,-c(1)],ID=raw$SYMBOL)
dge<-as.matrix(dge)
dge <- DGEList(counts = dge)
dge <- calcNormFactors(dge)
logCPM <- cpm(dge, log=TRUE, prior.count=3)
n.sample=ncol(raw)
cols <- rainbow(n.sample*1.2)
boxplot(logCPM[,1:78],boxwex=0.6, notch=T,cex=0.08,las=2,col=cols,main="expression value")
group_list=factor(c(rep("N",6),rep("M",72)))
design=model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(logCPM)
head(design)
contrast.matrix<-makeContrasts("M-N",levels = design)
contrast.matrix
fit<-lmFit(logCPM,design)
fit2<-contrasts.fit(fit,contrast.matrix)
fit2<-eBayes(fit2)
options(digits = 4)
DEG<-topTable(fit2,coef = 1,n=Inf)
DEG<-na.omit(DEG)

#volcano plot
ggplot(data = DEG, aes(x = logFC, y = -log10(P.Value),colour = Change,fill=Change))+
  geom_point(alpha = 0.5,size=5)+
  scale_colour_manual(values = c("#4DBBD5", "grey", "#E64B35"))+ 
  #geom_text_repel(aes(label=anno_name),show.legend = F,colour = 'black',box.padding = 1)+ 
  xlab('log2(Fold change)')+ylab('-log10(P Value)')+ 
  geom_hline(yintercept = -log10(0.05),lty=2,lwd=0.6,alpha=0.8)+
  geom_vline(xintercept = c(0.5,-0.5),lty=2,lwd=0.6,alpha=0.8)+ 
  theme_bw()+theme(panel.border=element_rect(size = 1),
                   axis.line = element_line(colour = "black",size = 1),
                   axis.text = element_text(size = 15, colour = "black"), 
                   axis.title = element_text(size = 20),
                   axis.ticks = element_line(size=1),
                   legend.position = "none")



##Go and KEGG
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(enrichplot)
gse130970_Exp=fread('GSE130970.csv',header = T,stringsAsFactors = F)

DLD_PDHB=gse130970_Exp[c('DLD','PDHB'),]
DLD_PDHB=data.frame(t(DLD_PDHB))
DLD_PDHB$model=-1.63+0.24*DLD_PDHB$DLD+0.2*DLD_PDHB$PDHB
DLD_PDHB$status=ifelse(DLD_PDHB$model>median(DLD_PDHB$model),'H','L')


dge<-gse130970_Exp
dge<-as.matrix(dge)
dge <- DGEList(counts = dge)
dge <- calcNormFactors(dge)
logCPM <- cpm(dge, log=TRUE, prior.count=3)

group_list=factor(DLD_PDHB$status)
design=model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(logCPM)

contrast.matrix<-makeContrasts("H-L",levels = design)
contrast.matrix

fit<-lmFit(logCPM,design)

fit2<-contrasts.fit(fit,contrast.matrix)
fit2<-eBayes(fit2)

options(digits = 4) 
tempOutput<-topTable(fit2,coef = 1,n=Inf)
tempOutput<-na.omit(tempOutput)
tempOutput$SYMBOL=rownames(tempOutput)

gene.list <- tempOutput[,c('ENTREZID','logFC')]
geneList<-gene.list$logFC
names(geneList)=gene.list$ENTREZID
geneList=sort(geneList,decreasing = T) 
egou <- gseGO(
  geneList     = geneList,  
  OrgDb        = org.Hs.eg.db, 
  ont          = "BP",  
  pvalueCutoff = 0.1)

kk <- gseKEGG(geneList, organism = "hsa",pvalueCutoff = 0.1)

golist <- c('GO:0006084','GO:0006631','GO:0010273')
gseaplot2(egou,golist,color="red",pvalue_table = F,title="",base_size=15,ES_geom="line")

kklist <- c('hsa01212','hsa00010','hsa00620')
gseaplot2(kk,kklist,color="red",pvalue_table = F,title="",base_size=15,ES_geom="line")

